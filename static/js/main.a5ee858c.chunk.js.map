{"version":3,"sources":["Cell/index.js","Field/index.js","Score/index.js","GameOver/index.js","Hooks/useKeyPress.js","GameEngine/GameEngine.js","App/index.js","serviceWorker.js","index.js"],"names":["Cell","_ref","value","react_default","a","createElement","className","Field","tableBody","data","map","row","cells","cell","src_Cell","Score","GameOver","dispatch","Fragment","onClick","type","arrowKeys","genField","arr","i","length","j","Math","floor","random","shuffle","reduce","acc","val","idx","push","makeMove","matrix","direction","result","mergeToLeft","rotateCCW","rotateCW","sum","mergeToUp","mergeToRight","mergeToDown","moveMatrix","JSON","stringify","flatMatrix","flat","freeCells","filter","position","pos","indexOf","foundPos","foundIdx","findIndex","addNewCell","canMove","hasEmptyCells","rowIdx","cellIdx","flipMatrix","col","reverse","newRow","newIdx","App","_useReducer","useReducer","state","action","field","score","gameOver","_useReducer2","Object","slicedToArray","key","_useState","useState","_useState2","pressed","setPressed","downHandler","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","useArrowKeyPress","src_GameOver","src_Score","src_Field","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5ee858c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nfunction Cell({ value }) {\r\n  return <div className=\"cell\">{value ? value : \"\"}</div>;\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell\";\r\n\r\nfunction Field({ data }) {\r\n  const tableBody = data.map(row => {\r\n    const cells = row.map(cell => (\r\n      <td>\r\n        <Cell value={cell} />\r\n      </td>\r\n    ));\r\n\r\n    return <tr>{cells}</tr>;\r\n  });\r\n\r\n  return (\r\n    <table>\r\n      <tbody>{tableBody}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\n\r\nfunction Score({ value }) {\r\n  return <div className=\"score\">Score: {value}</div>;\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nfunction GameOver({ dispatch }) {\r\n  return (\r\n    <>\r\n      <h2>Game Over!</h2>\r\n      <button\r\n        onClick={() => {\r\n          dispatch({ type: \"new\" });\r\n        }}\r\n      >\r\n        Restart\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst arrowKeys = [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"];\r\n\r\nexport default function useArrowKeyPress() {\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  const downHandler = ({ key }) => {\r\n    if (arrowKeys.indexOf(key) >= 0) {\r\n      setPressed(key);\r\n    }\r\n  };\r\n\r\n  const upHandler = ({ key }) => {\r\n    if (arrowKeys.indexOf(key) >= 0) {\r\n      setPressed(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return pressed;\r\n}\r\n","export function genField() {\r\n  const arr = shuffle([2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n  return arr.reduce(\r\n    (acc, val, idx) => {\r\n      acc[idx % 4].push(val);\r\n      return acc;\r\n    },\r\n    [[], [], [], []]\r\n  );\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport function makeMove(matrix, direction) {\r\n  const result = moveMatrix(matrix, direction);\r\n\r\n  if (JSON.stringify(matrix) !== JSON.stringify(result.matrix)) {\r\n    result.matrix = addNewCell(result.matrix);\r\n  }\r\n\r\n  result.canMove = canMove(result.matrix);\r\n\r\n  return result;\r\n}\r\n\r\nfunction canMove(matrix) {\r\n  if (hasEmptyCells(matrix)) {\r\n    return true;\r\n  }\r\n\r\n  for (let rowIdx = 0; rowIdx < matrix.length; rowIdx++) {\r\n    for (let cellIdx = 0; cellIdx < matrix[0].length; cellIdx++) {\r\n      const cell = matrix[rowIdx][cellIdx];\r\n\r\n      if (\r\n        (rowIdx > 0 && matrix[rowIdx - 1][cellIdx] === cell) ||\r\n        (cellIdx < 3 && matrix[rowIdx][cellIdx + 1] === cell) ||\r\n        (rowIdx < 3 && matrix[rowIdx + 1][cellIdx] === cell) ||\r\n        (cellIdx > 0 && matrix[rowIdx][cellIdx - 1] === cell)\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction moveMatrix(matrix, direction) {\r\n  switch (direction) {\r\n    case \"ArrowUp\":\r\n      return mergeToUp(matrix);\r\n    case \"ArrowRight\":\r\n      return mergeToRight(matrix);\r\n    case \"ArrowDown\":\r\n      return mergeToDown(matrix);\r\n    case \"ArrowLeft\":\r\n      return mergeToLeft(matrix);\r\n    default:\r\n      return { matrix: matrix, sum: 0 };\r\n  }\r\n}\r\n\r\nfunction mergeToUp(matrix) {\r\n  const result = mergeToLeft(rotateCCW(matrix));\r\n  return { matrix: rotateCW(result.matrix), sum: result.sum };\r\n}\r\n\r\nfunction mergeToRight(matrix) {\r\n  const result = mergeToLeft(rotateCCW(rotateCCW(matrix)));\r\n  return { matrix: rotateCW(rotateCW(result.matrix)), sum: result.sum };\r\n}\r\n\r\nfunction mergeToDown(matrix) {\r\n  const result = mergeToLeft(rotateCW(matrix));\r\n  return { matrix: rotateCCW(result.matrix), sum: result.sum };\r\n}\r\n\r\nfunction addNewCell(matrix) {\r\n  const flatMatrix = matrix.flat();\r\n  const freeCells = flatMatrix.filter(cell => cell === 0).length;\r\n\r\n  if (freeCells === 0) {\r\n    return matrix;\r\n  }\r\n\r\n  const position = Math.floor(Math.random() * Math.floor(freeCells));\r\n  const idx = findIndex(flatMatrix, position);\r\n  matrix[Math.floor(idx / 4)][idx % 4] = 2;\r\n  return matrix;\r\n}\r\n\r\nfunction findIndex(arr, pos) {\r\n  if (pos === 0) {\r\n    return arr.indexOf(0);\r\n  }\r\n\r\n  let foundPos = 0;\r\n  let foundIdx = 0;\r\n  while (foundPos !== pos) {\r\n    foundIdx = arr.indexOf(0, foundIdx + 1);\r\n    foundPos++;\r\n  }\r\n\r\n  return foundIdx;\r\n}\r\n\r\nfunction flipMatrix(matrix) {\r\n  return matrix[0].map((col, idx) => {\r\n    return matrix.map(row => row[idx]);\r\n  });\r\n}\r\n\r\nfunction rotateCW(matrix) {\r\n  return flipMatrix(matrix.reverse());\r\n}\r\n\r\nfunction rotateCCW(matrix) {\r\n  return flipMatrix(matrix).reverse();\r\n}\r\n\r\nfunction mergeToLeft(matrix) {\r\n  let sum = 0;\r\n\r\n  const mergedMatrix = matrix.map(row => {\r\n    const newRow = [0, 0, 0, 0];\r\n    let newIdx = 0;\r\n\r\n    row.map((cell, idx) => {\r\n      if (cell !== 0) {\r\n        if (newRow[newIdx] === 0) {\r\n          newRow[newIdx] += cell;\r\n        } else if (newRow[newIdx] === cell) {\r\n          newRow[newIdx] += cell;\r\n          newIdx++;\r\n          sum += cell * 2;\r\n        } else {\r\n          newRow[++newIdx] = cell;\r\n        }\r\n      }\r\n    });\r\n\r\n    return newRow;\r\n  });\r\n\r\n  return { matrix: mergedMatrix, sum };\r\n}\r\n\r\nfunction hasEmptyCells(matrix) {\r\n  const flatMatrix = matrix.flat();\r\n  const freeCells = flatMatrix.filter(cell => cell === 0).length;\r\n\r\n  return freeCells > 0;\r\n}\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport \"./App.css\";\r\nimport Field from \"../Field\";\r\nimport Score from \"../Score\";\r\nimport GameOver from \"../GameOver\";\r\nimport useArrowKeyPress from \"../Hooks/useKeyPress\";\r\nimport { makeMove, genField } from \"../GameEngine\";\r\n\r\nfunction App() {\r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"move\":\r\n        const result = makeMove(state.field, action.direction);\r\n        return {\r\n          field: result.matrix,\r\n          score: state.score + result.sum,\r\n          gameOver: !result.canMove\r\n        };\r\n      case \"new\":\r\n        return { field: genField(), score: 0, gameOver: false };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    field: genField(),\r\n    score: 0,\r\n    gameOver: true\r\n  });\r\n  const key = useArrowKeyPress();\r\n\r\n  useEffect(() => {\r\n    if (key) {\r\n      dispatch({ type: \"move\", direction: key });\r\n    }\r\n  }, [key]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {state.gameOver && <GameOver dispatch={dispatch} />}\r\n      <Score value={state.score} />\r\n      <Field data={state.field} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}