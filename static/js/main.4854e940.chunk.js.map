{"version":3,"sources":["Cell/index.js","Field/index.js","Score/index.js","GameOver/index.js","Hooks/useKeyPress.js","GameEngine/Matrix.js","GameEngine/GameEngine.js","App/index.js","serviceWorker.js","index.js"],"names":["cellSize","Cell","_ref","value","x","y","className","concat","_useSpring","useSpring","top","left","from","xys","to","_useSpring2","Object","slicedToArray","props","set","stop","useEffect","react_default","a","createElement","web","div","style","objectSpread","transform","interpolate","s","convertField","field","map","row","rowIdx","cell","cellIdx","assign","flat","filter","Field","data","_useState","useState","_useState2","setField","tableBody","src_Cell","key","id","Score","GameOver","dispatch","Fragment","onClick","type","arrowKeys","flipMatrix","matrix","col","idx","rotateCW","slice","reverse","rotateCCW","genField","arr","i","length","j","Math","floor","random","shuffle","reduce","acc","val","push","genCell","makeMove","direction","result","mergeToLeft","sum","mergeToUp","mergeToRight","mergeToDown","moveMatrix","JSON","stringify","flatMatrix","freeCells","position","pos","findIndex","foundCell","addNewCell","canMove","hasEmptyCells","newRow","newIdx","arguments","undefined","Date","now","toString","substr","toUpperCase","initState","score","gameOver","App","_useReducer","useReducer","state","action","_useReducer2","pressed","setPressed","downHandler","indexOf","upHandler","_ref2","window","addEventListener","removeEventListener","useArrowKeyPress","src_GameOver","src_Score","src_Field","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4854e940.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport \"./Cell.css\";\r\n\r\nconst cellSize = 40;\r\n\r\nfunction Cell({ value, x, y }) {\r\n  const className = `cell ${!value ? \"cell--transparent\" : \"\"}`;\r\n\r\n  const [props, set, stop] = useSpring(() => ({\r\n    top: x * cellSize,\r\n    left: y * cellSize,\r\n    from: { xys: [0, 0, 0] },\r\n    to: { xys: [0, 0, 1] }\r\n  }));\r\n\r\n  useEffect(() => {\r\n    stop();\r\n    set({ top: x * cellSize, left: y * cellSize });\r\n  }, [x, y]);\r\n\r\n  return (\r\n    <animated.div\r\n      className={className}\r\n      style={{\r\n        ...props,\r\n        transform: props.xys.interpolate((x, y, s) => `scale(${s})`)\r\n      }}\r\n    >\r\n      {value ? value : \"\"}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Field.css\";\r\nimport Cell from \"../Cell\";\r\n\r\nfunction Field({ data }) {\r\n  const [field, setField] = useState(convertField(data));\r\n\r\n  useEffect(() => {\r\n    setField(convertField(data));\r\n  }, [data]);\r\n\r\n  const tableBody = field.map(cell => (\r\n    <Cell value={cell.value} x={cell.x} y={cell.y} key={cell.id} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"field-base\">\r\n      <div className=\"field\">{tableBody}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction convertField(field) {\r\n  return field\r\n    .map((row, rowIdx) =>\r\n      row.map((cell, cellIdx) => Object.assign(cell, { x: rowIdx, y: cellIdx }))\r\n    )\r\n    .flat()\r\n    .filter(cell => cell.value !== 0);\r\n}\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\nfunction Score({ value }) {\r\n  return <div className=\"score\">Score: {value}</div>;\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nfunction GameOver({ dispatch }) {\r\n  return (\r\n    <>\r\n      <h2>Game Over!</h2>\r\n      <button\r\n        onClick={() => {\r\n          dispatch({ type: \"new\" });\r\n        }}\r\n      >\r\n        Restart\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst arrowKeys = [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"];\r\n\r\nexport default function useArrowKeyPress() {\r\n  const [pressed, setPressed] = useState(false);\r\n\r\n  const downHandler = ({ key }) => {\r\n    if (arrowKeys.indexOf(key) >= 0) {\r\n      setPressed(key);\r\n    }\r\n  };\r\n\r\n  const upHandler = ({ key }) => {\r\n    if (arrowKeys.indexOf(key) >= 0) {\r\n      setPressed(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return pressed;\r\n}\r\n","function flipMatrix(matrix) {\n  return matrix[0].map((col, idx) => {\n    return matrix.map(row => row[idx]);\n  });\n}\n\nexport function rotateCW(matrix) {\n  return flipMatrix(matrix.slice(0).reverse());\n}\n\nexport function rotateCCW(matrix) {\n  return flipMatrix(matrix.slice(0)).reverse();\n}\n","import { rotateCCW, rotateCW } from \"./Matrix\";\r\n\r\nexport function genField() {\r\n  const arr = shuffle([2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  return arr.reduce(\r\n    (acc, val, idx) => {\r\n      acc[idx % 4].push(genCell(val));\r\n      return acc;\r\n    },\r\n    [[], [], [], []]\r\n  );\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nexport function makeMove(matrix, direction) {\r\n  const result = moveMatrix(matrix, direction);\r\n\r\n  if (JSON.stringify(matrix) !== JSON.stringify(result.matrix)) {\r\n    result.matrix = addNewCell(result.matrix);\r\n  }\r\n\r\n  result.canMove = canMove(result.matrix);\r\n\r\n  return result;\r\n}\r\n\r\nfunction canMove(matrix) {\r\n  if (hasEmptyCells(matrix)) {\r\n    return true;\r\n  }\r\n\r\n  for (let rowIdx = 0; rowIdx < matrix.length; rowIdx++) {\r\n    for (let cellIdx = 0; cellIdx < matrix[0].length; cellIdx++) {\r\n      const cell = matrix[rowIdx][cellIdx];\r\n\r\n      if (\r\n        (rowIdx > 0 && matrix[rowIdx - 1][cellIdx].value === cell.value) ||\r\n        (cellIdx < 3 && matrix[rowIdx][cellIdx + 1].value === cell.value) ||\r\n        (rowIdx < 3 && matrix[rowIdx + 1][cellIdx].value === cell.value) ||\r\n        (cellIdx > 0 && matrix[rowIdx][cellIdx - 1].value === cell.value)\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction moveMatrix(matrix, direction) {\r\n  switch (direction) {\r\n    case \"ArrowUp\":\r\n      return mergeToUp(matrix);\r\n    case \"ArrowRight\":\r\n      return mergeToRight(matrix);\r\n    case \"ArrowDown\":\r\n      return mergeToDown(matrix);\r\n    case \"ArrowLeft\":\r\n      return mergeToLeft(matrix);\r\n    default:\r\n      return { matrix: matrix, sum: 0 };\r\n  }\r\n}\r\n\r\nfunction mergeToUp(matrix) {\r\n  const result = mergeToLeft(rotateCCW(matrix));\r\n  return { matrix: rotateCW(result.matrix), sum: result.sum };\r\n}\r\n\r\nfunction mergeToRight(matrix) {\r\n  const result = mergeToLeft(rotateCCW(rotateCCW(matrix)));\r\n  return { matrix: rotateCW(rotateCW(result.matrix)), sum: result.sum };\r\n}\r\n\r\nfunction mergeToDown(matrix) {\r\n  const result = mergeToLeft(rotateCW(matrix));\r\n  return { matrix: rotateCCW(result.matrix), sum: result.sum };\r\n}\r\n\r\nfunction addNewCell(matrix) {\r\n  const flatMatrix = matrix.flat();\r\n  const freeCells = flatMatrix.filter(cell => cell.value === 0).length;\r\n\r\n  if (freeCells === 0) {\r\n    return matrix;\r\n  }\r\n\r\n  const position = Math.floor(Math.random() * Math.floor(freeCells));\r\n  const idx = findIndex(flatMatrix, position);\r\n  matrix[Math.floor(idx / 4)][idx % 4] = genCell(2);\r\n  return matrix;\r\n}\r\n\r\nfunction findIndex(arr, pos) {\r\n  if (pos === 0) {\r\n    return arr.findIndex(cell => cell.value === 0);\r\n  }\r\n\r\n  const foundCell = arr.filter(cell => cell.value === 0)[pos];\r\n  return arr.findIndex(cell => cell.id === foundCell.id);\r\n}\r\n\r\nfunction mergeToLeft(matrix) {\r\n  let sum = 0;\r\n\r\n  const mergedMatrix = matrix.map(row => {\r\n    const newRow = [{ value: 0 }, { value: 0 }, { value: 0 }, { value: 0 }];\r\n    let newIdx = 0;\r\n\r\n    row.map((cell, idx) => {\r\n      if (cell.value !== 0) {\r\n        if (newRow[newIdx].value === 0) {\r\n          newRow[newIdx] = cell;\r\n        } else if (newRow[newIdx].value === cell.value) {\r\n          cell.value = cell.value * 2;\r\n          newRow[newIdx] = cell;\r\n          newIdx++;\r\n          sum += cell.value * 2;\r\n        } else {\r\n          newRow[++newIdx] = cell;\r\n        }\r\n      }\r\n    });\r\n\r\n    return newRow;\r\n  });\r\n\r\n  return { matrix: mergedMatrix, sum };\r\n}\r\n\r\nfunction hasEmptyCells(matrix) {\r\n  const flatMatrix = matrix.flat();\r\n  const freeCells = flatMatrix.filter(cell => cell.value === 0).length;\r\n\r\n  return freeCells > 0;\r\n}\r\n\r\nfunction getUniqueId() {\r\n  return (\r\n    Date.now().toString(36) +\r\n    Math.random()\r\n      .toString(36)\r\n      .substr(2, 5)\r\n  ).toUpperCase();\r\n}\r\n\r\nfunction genCell(value = 2) {\r\n  return { value, id: getUniqueId() };\r\n}\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport \"./App.css\";\r\nimport Field from \"../Field\";\r\nimport Score from \"../Score\";\r\nimport GameOver from \"../GameOver\";\r\nimport useArrowKeyPress from \"../Hooks/useKeyPress\";\r\nimport { makeMove, genField } from \"../GameEngine\";\r\n\r\nconst initState = {\r\n  field: genField(),\r\n  score: 0,\r\n  gameOver: false\r\n};\r\n\r\nfunction App() {\r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"move\":\r\n        const result = makeMove(state.field, action.direction);\r\n        return {\r\n          field: result.matrix,\r\n          score: state.score + result.sum,\r\n          gameOver: !result.canMove\r\n        };\r\n      case \"new\":\r\n        return { field: genField(), score: 0, gameOver: false };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n  const key = useArrowKeyPress();\r\n\r\n  useEffect(() => {\r\n    if (key) {\r\n      dispatch({ type: \"move\", direction: key });\r\n    }\r\n  }, [key]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {state.gameOver && <GameOver dispatch={dispatch} />}\r\n      <Score value={state.score} />\r\n      <Field data={state.field} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}